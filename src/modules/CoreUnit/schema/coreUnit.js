import { gql } from 'apollo-server-core';
import { parseToSchemaUser, getCuIdFromPermissions } from '../../Auth/schema.js';

export const typeDefs = gql`

    type CoreUnit {
        "id is autogenerated in the database"
        id: ID!
        "Core Unit code - as defined within the Core Units' MIP39"
        code: String
        "Core Unit name - as as defined within the Core Units' MIP39"
        name: String
        "Logo image reference to swarm network. In case server is down, copy file reference and paste it in another swarm gateway link"
        image: String
        "Type of core unit - Technical, Business, Support etc"
        category: [CoreUnitCategory]
        "A short description of the mandate covered by the Core Unit"
        sentenceDescription: String
        "A more substantial description of the aims and the work to be performed by the Core Unit"
        paragraphDescription: String
        "Optional image provided by the Core Unit to give further context on the descriptions"
        paragraphImage: String
        "A shortened version of the Core Unit code"
        shortCode: String
        "Link to the Legacy GitHub repository containing historical records of the Core Unit Budget Statement reports"
        legacyBudgetStatementUrl: String       
        "Information on the Users that are this Core Units' auditors"
        auditors: [User] 
        "Access details on the social media channels of a Core Unit"
        socialMediaChannels: [SocialMediaChannels]
        "Work basis of the FTE's within a Core Unit, use this field to access details of the FTE's contributing to a Core Unit"
        contributorCommitment: [ContributorCommitment]
        "Access details on the relevant GitHub contributions of a Core Unit"
        cuGithubContribution: [CuGithubContribution]
        "Object containing data relating to updates provided by the Core Unit"
        cuUpdates: [CuUpdate]
    }

    "Possible values for Core Unit categories - A Core Unit can be assigned to more than one category"
    enum CoreUnitCategory {
        Technical
        Support
        Operational
        Business
        RWAs
        Growth
        Finance
        Legal
    }

    type CuUpdate {
        "Automatically generated ID"
        id: ID!
        "The ID of the relevant Core Unit"
        cuId: ID!
        "The title of the update"
        updateTitle: String
        "The date that the update was published"
        updateDate: String
        "A relevant link to where the update is hosted"
        updateUrl: String
    }

    type CoreUnitPayload {
        errorrs: [Error!]!
        coreUnit: CoreUnit
    }

    extend type Query {
        "Use this query to retrieve information about ALL Core Units or one Core Unit by using filter arguments."
        coreUnits(filter: CoreUnitFilter, limit: Int, offset: Int): [CoreUnit],
        cuUpdates(filter: CuUpdateFilter): [CuUpdate],
    }

    "Provid information of an update of a Core Unit"
    input CuUpdateFilter {
        "Automatically generated ID"
        id: ID
        "The ID of the relevant Core Unit"
        cuId: ID
        "The title of the update"
        updateTitle: String
        "The date that the update was published"
        updateDate: DateTime
        "A relevant link to where the update is hosted"
        updateUrl: String
    }

    input CoreUnitInput {
        code: String!
        name: String!
    }

    input CoreUnitFilter {
        "Use to filter on the automatically generated ID of a Core Unit"
        id: ID
        "Use to filter on the full code of a Core Unit e.g. 'SES-001'"
        code: String
        "Use to filter on the name of a Core Unit e.g. 'Sustainable Ecosystem Scaling'"
        name: String
        "Use to filter on the short code of a Core Unit e.g. 'SES'"
        shortCode: String
    }
`;

export const resolvers = {
    Query: {
        // coreUnits: (parent, args, context, info) => {}
        coreUnits: async (_, filter, { dataSources }) => {
            const result = await dataSources.db.CoreUnit.getCoreUnits(filter)
            const parsedResult = result.map(cu => {
                if (cu.category !== null) {
                    const cleanCategory = cu.category.slice(1, cu.category.length - 1)
                    cu.category = cleanCategory.split(',');
                    return cu;
                } else {
                    return cu;
                }
            })
            return parsedResult;
        },
        cuUpdates: async (_, { filter }, { dataSources }) => {
            return await dataSources.db.CoreUnit.getCuUpdates(filter);
        }
    },
    CoreUnit: {
        socialMediaChannels: async (parent, __, { dataSources }) => {
            const { id } = parent;
            const result = await dataSources.db.CoreUnit.getSocialMediaChannels({ cuId: id });
            return result;
        },
        contributorCommitment: async (parent, __, { dataSources }) => {
            const { id } = parent;
            const result = await dataSources.db.CoreUnit.getContributorCommitments(id);
            return result;
        },
        cuGithubContribution: async (parent, __, { dataSources }) => {
            const { id } = parent;
            const result = await dataSources.db.CoreUnit.getCuGithubContributions(id);
            return result;
        },
        cuUpdates: async (parent, __, { dataSources }) => {
            const { id } = parent;
            const result = await dataSources.db.CoreUnit.getCuUpdates({ cuId: id });
            return result;
        },
        auditors: async (parent, __, { dataSources }) => {
            const { id } = parent;
            const resourceUsers = await dataSources.db.Auth.getSystemRoleMembers('CoreUnitAuditor', 'CoreUnit', id);
            return resourceUsers
        }
    }
};